version: '3.7'

services:
  osrm:
    image: osrm/osrm-backend:v5.22.0
    environment:
      FILE_NAME: data
      OSRM_VERSION: v5.22.0
      TAR_DIRECTORY: data.tar.gz
      DOWNLOAD_URL: https://s3.eu-north-1.amazonaws.com/pm-mapbox-test.iteam.se
    volumes:
      - ./data:/data
    command:
      - bash
      - -c
      - |
        # install dependencies
        if [[ ! -f "/data/$${FILE_NAME}.osrm" ]]; then
          # check if tar-directory exists
          if [[ ! -f "/data/$${TAR_DIRECTORY}" ]]; then
            # check if wget exists, else install
            if [[ ! $$(command -v wget) ]]; then
              apt-get update
              apt-get install -y --no-install-recommends wget
              rm -rf /var/lib/apt/lists/*
            fi
            # certificates takes space, ignore them
            wget --no-check-certificate --debug "$${DOWNLOAD_URL}/$${OSRM_VERSION}/$${TAR_DIRECTORY}" -O "/data/$${TAR_DIRECTORY}"
          fi
          # extract pre-compiled data to /data
          tar -C / -xvf "/data/$${TAR_DIRECTORY}"
          # remove tar-directory, since it takes space
          rm -rf "/data/$${TAR_DIRECTORY}"
        fi
        # start application using extracted data in directory /data
        osrm-routed --algorithm mld "/data/$${FILE_NAME}.osrm"
    networks:
      - internal
  redis:
    image: bitnami/redis:latest
    volumes:
      - ./redis:/bitnami/redis/data
    environment:
      - DISABLE_COMMANDS=FLUSHDB,FLUSHALL,CONFIG # Disable these for security reasons
      - REDIS_PASSWORD=${REDIS__PASSWORD:-lg565ABwjvZw4TgAQC6R}
    networks:
      - internal
    healthcheck:
      - test: ['CMD', 'curl', 'http://redis:6379']
      - interval: 30s
      - timeout: 2s
      - retries: 3
  postgres:
    image: postgres:11.5
    volumes:
      - postgres11:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES__USER:-iteamadmin}
      - POSTGRES_PASSWORD=${POSTGRES__PASS:-adminadmin1337}
      - POSTGRES_DB=${POSTGRES__DB:-brevduvor}
      - POSTGRES_INITDB_ARGS=--encoding=utf8
    healthcheck:
      - test: ['CMD', 'pg_isready', '-q', '-d', 'brevduvor', '-U', 'iteamadmin']
      - interval: 2s
      - timeout: 5s
      - retries: 3
    networks:
      - internal
  drone-simulator:
    image: brevduvor-drone:ci
    environment:
      - OSRM=http://osrm:5000
    networks:
      - internal
  api:
    image: brevduvor-api:ci
    environment:
      - REDIS__HOST=redis
      - POSTGRES__HOST=postgres
      - POSTGRES__USER=iteamadmin
      - POSTGRES__PASSWORD=adminadmin1337
      - POSTGRES__DATABASE=brevduvor
      - DB_ENV=test
      - DRONE_URL=http://drone-simulator:3030
      - WEBHOOK_URL=http://api:4000/status
      - OSRM_URL=http://osrm:5000
      - JWT_PRIVATE_KEY=definatelyaprivatekey
    command: bash -c "./bin/wait-for-it.sh postgres:5432 -- ./bin/wait-for-it.sh redis:6379 -- ./bin/wait-for-it.sh osrm:5000 -- ./bin/migrate.sh && ./bin/seed-ci.sh && npm start"
    depends_on:
      - drone-simulator
      - redis
    networks:
      - internal
  client:
    image: brevduvor-client:ci
    depends_on:
      - api
    networks:
      - internal
    command:
      - sh
      - -c
      - until curl http://api:4000; do sleep 1; done && exec nginx -g 'daemon off;'
  cypress:
    image: iteam1337/brevduvor-cypress:ci
    command: bash -c "until curl http://client:3000; do sleep 1; done && ./node_modules/.bin/cypress run"
    environment:
      - CYPRESS_baseUrl=http://client:80/
    volumes:
      - type: bind
        source: ./packages/client/cypress
        target: /e2e/cypress
    networks:
      - internal
networks:
  internal:

volumes:
  postgres11:
