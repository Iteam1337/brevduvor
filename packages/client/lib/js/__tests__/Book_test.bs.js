// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict'

var Jest = require('@glennsl/bs-jest/lib/js/src/jest.js')
var Curry = require('bs-platform/lib/js/curry.js')
var React = require('react')
var Book$Client = require('../src/Book.bs.js')
var I18n$Client = require('../src/I18n.bs.js')
var GraphqlTag = require('graphql-tag')
var TestUtils$Client = require('../src/TestUtils.bs.js')
var ReactTestingLibrary = require('bs-react-testing-library/lib/js/src/ReactTestingLibrary.bs.js')
var React$1 = require('@testing-library/react')

var mocks = /* array */ [
  {
    request: {
      query: GraphqlTag.default(Book$Client.AllDestinations[/* query */ 1]),
    },
    result: {
      data: {
        allDestinations: /* array */ [
          {
            alias: 'Storuman',
            lat: 13.333337,
            lon: 16.666666,
            __typename: 'Destination',
          },
          {
            alias: 'Slussfors',
            lat: 13.333337,
            lon: 16.666666,
            __typename: 'Destination',
          },
        ],
      },
    },
  },
]

Jest.describe('Book', function(param) {
  Jest.test('renders loading initially', function(param) {
    var eta = React.createElement(
      TestUtils$Client.MockedProvider[/* make */ 0],
      {
        children: React.createElement(Book$Client.make, {}),
        mocks: mocks,
      }
    )
    var element = ReactTestingLibrary.render(undefined, undefined, eta)
    return Jest.Expect[/* toMatchSnapshot */ 16](
      Jest.Expect[/* expect */ 0](element.container)
    )
  })
  return Jest.testAsync('renders with data', undefined, function(finish) {
    var eta = React.createElement(
      TestUtils$Client.MockedProvider[/* make */ 0],
      {
        children: React.createElement(Book$Client.make, {}),
        mocks: mocks,
      }
    )
    var element = ReactTestingLibrary.render(undefined, undefined, eta)
    React$1.waitForElement(function(param) {
      var partial_arg_001 = I18n$Client.Translations[/* _toString */ 0](
        /* Swedish */ 1,
        /* BookTrip_To_Label */ 11
      )
      var partial_arg = /* `Str */ [4153489, partial_arg_001]
      return (function(eta) {
        var param = undefined
        var param$1 = eta
        return ReactTestingLibrary.getByText(partial_arg, param, param$1)
      })(element)
    }).then(function(param) {
      return Promise.resolve(
        Curry._1(
          finish,
          Jest.Expect[/* toMatchSnapshot */ 16](
            Jest.Expect[/* expect */ 0](element.container)
          )
        )
      )
    })
    return /* () */ 0
  })
})

exports.mocks = mocks
/* mocks Not a pure module */
