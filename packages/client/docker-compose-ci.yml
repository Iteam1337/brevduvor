version: '3.7'

services:
  postgres:
    image: postgres:11.5
    volumes:
      - postgres11:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES__USER:-iteamadmin}
      - POSTGRES_PASSWORD=${POSTGRES__PASS:-adminadmin1337}
      - POSTGRES_DB=${POSTGRES__DB:-brevduvor}
      - POSTGRES_INITDB_ARGS=--encoding=utf8
    healthcheck:
      test:
        [
          'CMD',
          'bash',
          '-c',
          "runuser -l postgres -U iteamadmin -c 'pg_isready' || exit 1",
        ]
      interval: 2s
      timeout: 5s
      retries: 3
    networks:
      - internal

  # elasticsearch:
  #   image: 'elasticsearch:7.3.1'
  #   ports:
  #     - '9200:9200'
  #   environment:
  #     - discovery.type=single-node
  #   ulimits:
  #     nproc: 3000
  #     nofile: 65536
  #     memlock: -1

  # osrm-backend:
  #   image: osrm/osrm-backend:v5.22.0
  #   environment:
  #     FILE_NAME: data
  #     OSRM_VERSION: v5.22.0
  #     TAR_DIRECTORY: data.tar.gz
  #     DOWNLOAD_URL: https://s3.eu-north-1.amazonaws.com/pm-mapbox-test.iteam.se
  #   volumes:
  #     - ./data:/data
  #   ports:
  #     - 5000:5000
  #   command:
  #     - bash
  #     - -c
  #     - |
  #       # install dependencies
  #       if [[ ! -f "/data/$${FILE_NAME}.osrm" ]]; then
  #         # check if tar-directory exists
  #         if [[ ! -f "/data/$${TAR_DIRECTORY}" ]]; then
  #           # check if wget exists, else install
  #           if [[ ! $$(command -v wget) ]]; then
  #             apt-get update
  #             apt-get install -y --no-install-recommends wget
  #             rm -rf /var/lib/apt/lists/*
  #           fi
  #           # certificates takes space, ignore them
  #           wget --no-check-certificate --debug "$${DOWNLOAD_URL}/$${OSRM_VERSION}/$${TAR_DIRECTORY}" -O "/data/$${TAR_DIRECTORY}"
  #         fi
  #         # extract pre-compiled data to /data
  #         tar -C / -xvf "/data/$${TAR_DIRECTORY}"
  #         # remove tar-directory, since it takes space
  #         rm -rf "/data/$${TAR_DIRECTORY}"
  #       fi
  #       # start application using extracted data in directory /data
  #       osrm-routed --algorithm mld "/data/$${FILE_NAME}.osrm"

  drone-simulator:
    image: brevduvor-drone:ci
    ports:
      - '3030:3030'
  api:
    image: brevduvor-api:ci
    environment:
      - POSTGRES__HOST=postgres
      - JWT_PRIVATE_KEY=definatelyaprivatekey
    depends_on:
      - postgres
    command:
      - sh
      - -c
      - export DATABASE_URL="postgres://iteamadmin:adminadmin1337@postgres:5432/brevduvor" && npm run migrate:prod up && npm start
    networks:
      - internal
  client:
    image: brevduvor-client:ci
    depends_on:
      - drone-simulator
      - api
    networks:
      - internal
  cypress:
    # the Docker image to use from https://github.com/cypress-io/cypress-docker-images
    image: 'cypress/included:3.4.1'
    depends_on:
      - client
    environment:
      # pass base url to test pointing at the web application
      - CYPRESS_baseUrl=http://client:3000
      - CYPRESS_API_URL=http://api:4000
    # share the current folder as volume to avoid copying
    working_dir: /cypress
    volumes:
      - ./:/cypress
    networks:
      - internal

networks:
  internal:

volumes:
  postgres11:
